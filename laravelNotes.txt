to connect SQL db in laravel & using xampp make sure this extension is in your php.ini config file extension=php_pdo_mysql.dll

-to make a new controller. in terminal you can run php aritisan make:controller nameOfMyController
 automatically get created in your http/controllers directory
  if you want it in a subdirectory, php aritisan make:controller MyParentDirectory\\nameOfMyController
bring in any dependencies in your view to access in the blade view file...data/array to loop through & display on ui or any var.
 $pizzas = [
            ['type' => 'Pepi zah', 'base' => 'cheese & pepporoni'],
            ['type' => 'The zah', 'base' => 'cheese & pepporoni, bacon, sausage, black olive'],
            ['type' => 'Olaha zah', 'base' => 'cheese, ham, bacon & pinapple'],
        ];

        $drinks = [
            ['type' => 'Coke', 'price' => 2.99 ],
            ['type' => 'Sprite', 'price' => 2.99 ],
            ['type' => 'Root Beer', 'price' => 2.99 ],
            ['type' => 'Smart Water', 'price' => 3.99 ],
        ];
return view('menu' , ['drinks' => $drinks, 'pizzas' => $pizzas ]);


Define your routes in web.php  Route::get  then bring in your controller, & the function name.
to import your controller in the web.php file:  use path\of\controller\NameOfControllerFile
use is the keyword instead of import 


<a href="{{ route('register') }}" class="p-3">Register</a> 
instead of href="/register"
so in your web.php register route you can chain on a name to the route. this one is called register.
Route::get('/register', [RegisterController::class, 'index'])->name('register');


to create a migration:
php artisan make:migration create_likes_table --create=likes

database models:
to create a new db schema you can run php artisan make:model whateveryouwantthenametobe
to create it with a migration & factory php artisan make:model whateveryouwantthenametobe -m -f

then go to your new schema located under database/migrations/
then add whatever you want in the table blueprint for example $table->text('body'); creates a column/section called body that will except text...
then run php artisan migrate


dummy data / seeder 
to enter in dummy data to db:
in terminal: php artisan tinker
enter in path of ur db model then factory() then chain the number of times you want it entered then create
example: App\Models\Post::factory()->times(200)->create(['user_id' => 1]);


Once your db table is made you can interact with your data by making an eloquent model
php artisan make:model Whatever you want to name it.if your table is called pizzas you can name ur model Pizza  capitalize the first Letter just like in mongodb.
It will be created in your App/Models directory
If you want to overide the table you model is connected to:
in you class write: protected $table = 'whatever_table_you_want';


to add a column to your existing db make a migration file add_columnName_to_tableName
add will represent the column the other files in ur migrations dir will be create_ect...


for a boiler plate login/logout header with auth equppied you can use with vue || react ect..
composer require laravel/ui
php artisan ui vue --auth
npm run dev && npm run dev

will generate a login view, register, home view..& Auth::routes() in web.php, & a homecontroller


on named routes:
in your web.php file:
Route::get('/pizzas', [PizzaController::class, 'index' ])->name('pizzas.index')->middleware('auth');
name is pizzas.index
in your a tag in a view: href="{{ route('pizzas.index') }}"
route method then enter in the name.
if you have a id to enter as well, that is just a 2nd parameter
a tag href="{{ route('pizzas.index', $pizza->id) }}"
or in a form action ="{{ route('pizzas.index', pizza->id) }}"

dd()  helper function which is used to dump a variable's contents to the browser and stop the further script execution. It stands for Dump and Die

